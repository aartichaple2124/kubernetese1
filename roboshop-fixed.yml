# =========================================
# Namespace
# =========================================
apiVersion: v1
kind: Namespace
metadata:
  name: roboshop
---
# =========================================
# SECRETS (edit values if yours differ)
# - MySQL: user=root, password=roboshop
# - RabbitMQ: user=guest, password=guest
# =========================================
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: roboshop
type: Opaque
stringData:
  MYSQL_USER: "root"
  MYSQL_PASSWORD: "roboshop"
---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-secret
  namespace: roboshop
type: Opaque
stringData:
  AMQP_USER: "guest"
  AMQP_PASS: "guest"
---
# =========================================
# CONFIGMAPS (pointing to external DB IPs)
# =========================================
# FRONTEND -> internal services by name/port
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend
  namespace: roboshop
data:
  CATALOGUE_HOST: "catalogue"
  CATALOGUE_PORT: "8080"
  USER_HOST: "user"
  USER_PORT: "8080"
  CART_HOST: "cart"
  CART_PORT: "8080"
  SHIPPING_HOST: "shipping"
  SHIPPING_PORT: "8080"
  PAYMENT_HOST: "payment"
  PAYMENT_PORT: "8080"
---
# CATALOGUE -> Mongo (external)
apiVersion: v1
kind: ConfigMap
metadata:
  name: catalogue
  namespace: roboshop
data:
  MONGO: "mongodb://10.0.0.14:27017/catalogue"
---
# USER -> Mongo + Redis (external)
apiVersion: v1
kind: ConfigMap
metadata:
  name: user
  namespace: roboshop
data:
  MONGO: "mongodb://10.0.0.14:27017/users"
  REDIS_HOST: "10.0.0.5"
---
# CART -> Redis (external) + talk to internal catalogue
apiVersion: v1
kind: ConfigMap
metadata:
  name: cart
  namespace: roboshop
data:
  REDIS_HOST: "10.0.0.5"
  CATALOGUE_HOST: "catalogue"
  CATALOGUE_PORT: "8080"
---
# SHIPPING -> MySQL (external) + Cart (internal)
apiVersion: v1
kind: ConfigMap
metadata:
  name: shipping
  namespace: roboshop
data:
  CART_HOST: "cart"
  CART_PORT: "8080"
  MYSQL_HOST: "10.0.0.9"
---
# PAYMENT -> RabbitMQ (external)
apiVersion: v1
kind: ConfigMap
metadata:
  name: payment
  namespace: roboshop
data:
  AMQP_HOST: "10.0.0.12"
---
# =========================================
# DEPLOYMENTS + SERVICES
# =========================================

# -------- FRONTEND --------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: roboshop
  labels: { app: frontend }
spec:
  replicas: 1
  selector: { matchLabels: { app: frontend } }
  template:
    metadata:
      labels: { app: frontend }
    spec:
      containers:
        - name: frontend
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/frontend
          ports: [{ containerPort: 80 }]
          envFrom:
            - configMapRef: { name: frontend }
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: roboshop
spec:
  type: LoadBalancer
  selector: { app: frontend }
  ports:
    - port: 80
      targetPort: 80

# -------- CATALOGUE --------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  namespace: roboshop
  labels: { app: catalogue }
spec:
  replicas: 1
  selector: { matchLabels: { app: catalogue } }
  template:
    metadata:
      labels: { app: catalogue }
    spec:
      containers:
        - name: catalogue
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/catalogue
          ports: [{ containerPort: 8080 }]
          envFrom:
            - configMapRef: { name: catalogue }
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  namespace: roboshop
spec:
  selector: { app: catalogue }
  ports:
    - port: 8080
      targetPort: 8080

# -------- USER --------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  namespace: roboshop
  labels: { app: user }
spec:
  replicas: 1
  selector: { matchLabels: { app: user } }
  template:
    metadata:
      labels: { app: user }
    spec:
      containers:
        - name: user
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/user
          ports: [{ containerPort: 8080 }]
          envFrom:
            - configMapRef: { name: user }
---
apiVersion: v1
kind: Service
metadata:
  name: user
  namespace: roboshop
spec:
  selector: { app: user }
  ports:
    - port: 8080
      targetPort: 8080

# -------- CART --------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cart
  namespace: roboshop
  labels: { app: cart }
spec:
  replicas: 1
  selector: { matchLabels: { app: cart } }
  template:
    metadata:
      labels: { app: cart }
    spec:
      containers:
        - name: cart
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/cart
          ports: [{ containerPort: 8080 }]
          envFrom:
            - configMapRef: { name: cart }
---
apiVersion: v1
kind: Service
metadata:
  name: cart
  namespace: roboshop
spec:
  selector: { app: cart }
  ports:
    - port: 8080
      targetPort: 8080

# -------- SHIPPING --------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  namespace: roboshop
  labels: { app: shipping }
spec:
  replicas: 1
  selector: { matchLabels: { app: shipping } }
  template:
    metadata:
      labels: { app: shipping }
    spec:
      containers:
        - name: shipping
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/shipping
          ports: [{ containerPort: 8080 }]
          envFrom:
            - configMapRef: { name: shipping }
          env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: MYSQL_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  namespace: roboshop
spec:
  selector: { app: shipping }
  ports:
    - port: 8080
      targetPort: 8080

# -------- PAYMENT --------
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  namespace: roboshop
  labels: { app: payment }
spec:
  replicas: 1
  selector: { matchLabels: { app: payment } }
  template:
    metadata:
      labels: { app: payment }
    spec:
      containers:
        - name: payment
          image: public.ecr.aws/w8x4g9h7/roboshop-v3/payment
          ports: [{ containerPort: 8080 }]
          envFrom:
            - configMapRef: { name: payment }
          env:
            - name: AMQP_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-secret
                  key: AMQP_USER
            - name: AMQP_PASS
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-secret
                  key: AMQP_PASS
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  namespace: roboshop
spec:
  selector: { app: payment }
  ports:
    - port: 8080
      targetPort: 8080
